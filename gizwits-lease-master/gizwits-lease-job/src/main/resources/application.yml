#        指定读取配置文件:dev(开发环境),prod(生产环境),qa(测试环境)
spring:
  profiles:
    active: dev

  redis:
    database: 0
    host: localhost
    port: 6379
    password:
    pool:
      max-active: 8     # 连接池最大连接数（使用负值表示没有限制）
      max-idle: 8       # 连接池中的最大空闲连接
      max-wait: -1      # 连接池最大阻塞等待时间（使用负值表示没有限制）
      min-idle: 0       # 连接池中的最小空闲连接
    timeout: 0        # 连接超时时间（毫秒）

# ================== 开发环境 ================================
---
spring:
      profiles: dev
#      redis :
#         password: devskddienf
      datasource:
                type: com.alibaba.druid.pool.DruidDataSource
                driverClassName: com.mysql.jdbc.Driver
                url: jdbc:mysql://localhost:3306/brown?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull
                username: root
                password: 123456
#                password: root3306
#应用端口配置
server:
     port: 8089
     
# ================== 容器测试环境 ================================
---
spring:
  profiles: docker-qa
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://mysql:3306/gizwits_lease?createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=UTF-8&autoReconnect=true
    username: ${MYSQL_USERNAME}
    password: ${MYSQL_PASSWORD}
  redis:
    database: 0
    host: redis
    port: 6379
    password:
    pool:
      max-active: 8     # 连接池最大连接数（使用负值表示没有限制）
      max-idle: 8       # 连接池中的最大空闲连接
      max-wait: -1      # 连接池最大阻塞等待时间（使用负值表示没有限制）
      min-idle: 0       # 连接池中的最小空闲连接
    timeout: 0        # 连接超时时间（毫秒）

# 应用端口配置
server:
  port: 8080

# ================== 测试环境 ================================
---
spring:
      profiles: qa
      datasource:
                type: com.alibaba.druid.pool.DruidDataSource
                driverClassName: com.mysql.jdbc.Driver
                url:  jdbc:mysql://127.0.0.1:3306/gizwits_lease?createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=UTF-8&autoReconnect=true
                username: root
                password: Go4yingmo!
#应用端口配置
server:
     port: 8081

# ================== 生产环境 ================================
---
spring:
      profiles: prod
      datasource:
                type: com.alibaba.druid.pool.DruidDataSource
                driverClassName: com.mysql.jdbc.Driver
                url:  jdbc:mysql://127.0.0.1:3306/gizwits_lease?createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=UTF-8&autoReconnect=true
                username: root
                password: Go4yingmo!
                sql-script-encoding: utf-8  #指定SQL scripts编码
                initialize: true  #是不是要初始化这些数据库文件
                continueOnError: false #有了错误是否继续运行

                initialSize: 5
                minIdle: 5
                maxActive: 5
                maxWait: 60000                                              # 配置获取连接等待超时的时间
                timeBetweenEvictionRunsMillis: 60000                        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
                minEvictableIdleTimeMillis: 300000                          # 配置一个连接在池中最小生存的时间，单位是毫秒
                testWhileIdle: true
                testOnBorrow: false
                testOnReturn: false
                poolPreparedStatements: true                                 # 打开PSCache
                maxPoolPreparedStatementPerConnectionSize: 20                #指定每个连接上PSCache的大小
                filters: stat,wall,log4j
                connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
                 # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
                #useGlobalDataSourceStat: true                                 # 合并多个DruidDataSource的监控数据
      redis:
        password: yingmoke
#应用端口配置
server:
     port: 8080

#========Mybatis-plus配置==========
---
mybatis-plus:
 mapper-locations: classpath*:/mapper/*Mapper.xml
 global-config:
   id-type: 2
   field-strategy: 2
   auto-set-db-type: true
   db-column-underline: true
   refresh-mapper: true
 configuration:
   map-underscore-to-camel-case: true
   cache-enabled: false




#关闭微服务
endpoints:
  shutdown:
    enabled: true
    sensitive: false


#==========swagger2接口信息配置=======
gizwits:
    boot:
      apiInfo:
           title: 机智云商用租赁 REST API
           description: PC & APP API Document
           version: 1.0.0
           termsOfServiceUrl:
           contact:
                name: Business Products Deparment
                url: http://www.gizwits.com
                email: hlzhao@gizwits.com
           license:
           licenseUrl:
           pathsRegex: ^.*(?<!error)$
      accessTokenExpiration: 180
      authUrl: /app/wxPay/order,/app/wxPay/wxPayNotify,/app/wx/weixin,/app/wx/init


#=========================cron时间设置（错开时间，尽量避免在某一刻有过多的定时器启动）
cron:
  everyFiveMin: " 12 0/5 * * * ? " #每5分钟
  everyTenMin: "15 0/10 * * * ? " #每10分钟
  daily: " 0 0 0 * * ? " #每天凌晨
  orderAnalysis: " 0 3 0 * * ? " #每天运行
  deviceTrend: " 0 6 0 * * ? " #每天运行
  userTrend: " 0 9 0 * * ? " #每天运行
  deviceLocation: " 0 12 0 * * ? " #每天运行
  userLocation: " 0 15 0 * * ? " #每天运行
#  deviceOrderWidget: " 0 0 0 * * ? " #每天运行（产品v1.2定义）
  userWidget: " 0 21 0 * * ? " #每天运行（产品v1.2定义）
  deviceOrderWidget: " 15 0/5 * * * ? " #每隔5分钟运行
#  userWidget: " 20 0/5 * * * ? " #每隔5分钟运行
  faultAlertType: " 18 0/10 * * * ? " #每隔5分钟运行
  deviceWeather: " 22 33 0/2 * * ? " #每隔2小时运行 更新设备天气
  everyHour: " 22 33 0/1 * * ? " #每隔1小时运行 生成数据
  everyMin: "0 */1 * * * ?" #每1分钟







